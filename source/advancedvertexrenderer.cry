import Graphics2D;
import Math;

class advancedvertexrenderer : vertexrenderer{
	//1 if A further than B, -1 if B further than A, 0 if the same
	//Args = polys, screen_cooords
	function buggyLambda(a_,b_,args){
		polys = args[0];
		screen_coords = args[1];
		lista_=[screen_coords[polys[a_][0]][2],screen_coords[polys[a_][1]][2],screen_coords[polys[a_][2]][2]];
		listb_=[screen_coords[polys[b_][0]][2],screen_coords[polys[b_][1]][2],screen_coords[polys[b_][2]][2]];
		lista_.sort();
		listb_.sort();
		for(index_=2;index_>0;index_--){
			if(lista_[index_]>listb_[index_]){
				return true;
			}if(lista_[index_]<listb_[index_]){
				return false;
			}
		}
		return false;
	}
	function splitSort(list,comparison,comparison_args=[]){
		if(list.length<=1){
			return list;
		}else if(list.length==2){
			if(comparison(list[0],list[1],comparison_args)){
				return [list[0],list[1]];
			}else{
				return [list[1],list[0]];
			}
		}else{
			leftSide = list[:-1].filter((comparison_)=>(!comparison(list[-1],comparison_,comparison_args)));
			rightSide = list[:-1].filter((comparison_)=>(comparison(list[-1],comparison_,comparison_args)));
			left=this.splitSort(leftSide,comparison,comparison_args);
			right=this.splitSort([list[-1]]+rightSide,comparison,comparison_args);
			return left+right;
		}
	}

	

	function draw_scene(cam,coords,polys,extra_data=[]){ 
	if(polys.length<=1){
		return;
	}
	zindex=[];
	for(i=0;i<polys.length;i++){
		zindex.add(i);
	}
	//Simple Painter's Alg with no Overlap Handling
	//Each entry refers to an index in the polygon list, sorted from backmost to frontmost
	screen_coords=cam.pj_screen_space(coords,this.screenwidth,this.screenheight,true);
	//Sort the z-indexes by z-distance

	//Sort the z-indexes by z-distance
	zindex = this.splitSort(zindex,this.buggyLambda,[polys,screen_coords]);
	zindex=zindex.filter((polygon_index_)=>(near_clip<Math.max(Math.max(screen_coords[polys[polygon_index_][0]][2],screen_coords[polys[polygon_index_][1]][2]),screen_coords[polys[polygon_index_][2]][2])));
	//zindex.reverse();
	
	for(polygon_index : zindex){

			polygon_screen_coords = []; 
			vertex_a=screen_coords[polys[polygon_index][0]];
			vertex_b=screen_coords[polys[polygon_index][1]];
			vertex_c=screen_coords[polys[polygon_index][2]];
			
			
			if(vertex_a[2]<near_clip||vertex_b[2]<near_clip||vertex_c[2]<near_clip){
				//Manually assemble a polygon with cliped vertices
				//Determines which vertices have been clipped out of view
				a_clipped=vertex_a[2]<near_clip;
				b_clipped=vertex_b[2]<near_clip;
				c_clipped=vertex_c[2]<near_clip;
				//Add non-clipped vertices and construct clipped vertices
				if(!a_clipped){
					polygon_screen_coords.add(vertex_a);
				}
				if(a_clipped!=b_clipped){//Construct a clipped A-B vertex
					polygon_screen_coords.add([
						(((near_clip-vertex_b[2])*(((vertex_a[0]*vertex_a[2])-(vertex_b[0]*vertex_b[2]))/(vertex_a[2]-vertex_b[2])))+(vertex_b[0]*vertex_b[2]))/near_clip,
						(((near_clip-vertex_b[2])*(((vertex_a[1]*vertex_a[2])-(vertex_b[1]*vertex_b[2]))/(vertex_a[2]-vertex_b[2])))+(vertex_b[1]*vertex_b[2]))/near_clip
					]);
				}
				if(!b_clipped){
					polygon_screen_coords.add(vertex_b);
				}
				if(c_clipped!=b_clipped){//Construct a clipped B-C vertex
					polygon_screen_coords.add([
						(((near_clip-vertex_b[2])*(((vertex_c[0]*vertex_c[2])-(vertex_b[0]*vertex_b[2]))/(vertex_c[2]-vertex_b[2])))+(vertex_b[0]*vertex_b[2]))/near_clip,
						(((near_clip-vertex_b[2])*(((vertex_c[1]*vertex_c[2])-(vertex_b[1]*vertex_b[2]))/(vertex_c[2]-vertex_b[2])))+(vertex_b[1]*vertex_b[2]))/near_clip
					]);
				}

				if(!c_clipped){
					polygon_screen_coords.add(vertex_c);
				}
				if(c_clipped!=a_clipped){//Construct a clipped A-C vertex
					polygon_screen_coords.add([
						(((near_clip-vertex_a[2])*(((vertex_c[0]*vertex_c[2])-(vertex_a[0]*vertex_a[2]))/(vertex_c[2]-vertex_a[2])))+(vertex_a[0]*vertex_a[2]))/near_clip,
						(((near_clip-vertex_a[2])*(((vertex_c[1]*vertex_c[2])-(vertex_a[1]*vertex_a[2]))/(vertex_c[2]-vertex_a[2])))+(vertex_a[1]*vertex_a[2]))/near_clip
					]);
				}
				if(polygon_screen_coords.length<4){
					polygon_screen_coords.add(polygon_screen_coords[-1]);
				}
				this.poly_shader(polygon_screen_coords,polygon_index,extra_data);
			}else{
			this.poly_shader([vertex_a,vertex_b,vertex_c,vertex_c],polygon_index,extra_data);
			}
		}
		
		
		
	}



}