import Game;
import Graphics2D;
import Math;


//comparison takes args (a,b), true if A is before, false if A is after
function splitSort(list,comparison){
		pivot = list.length-1;
		if(list.length<=1){
			return list;
		}else if(list.length==2){
			if(comparison(list[0],list[1])){
				return [list[0],list[1]];
			}else{
				return [list[1],list[0]];
			}
		}else{
			leftSide = list[:-1].filter((comparison_)=>(!comparison(list[-1],comparison_)));
			rightSide = list[:-1].filter((comparison_)=>(comparison(list[-1],comparison_)));
			left=splitSort(leftSide,comparison);
			right=splitSort([list[-1]]+rightSide,comparison);
			return left+right;
		}
}

function simpleComparison(a,b){
	return a<b;
}

function main(){

	
	window=new Game.GameWindow("Sterling v1 Test",30,600,600);
  cam = new camera();
  renderman=new advancedvertexrenderer();
  renderwoman = new coloredrenderer();
  
  
  
  
	rz=0;
  cube = [
  [-1.0,4.0,-1.0],
  [1.0,4.0,1.0],
  [1.0,4.0,-1.0],
  [-1.0,4.0,1.0],
   [-1.0,6.0,-1.0],
  [1.0,6.0,1.0],
  [1.0,6.0,-1.0],
  [-1.0,6.0,1.0]
  ];
  faces = [[0,1,2],[0,1,3],[4,5,6],[4,5,7],[0,2,4],[2,4,6],[1,3,5],[3,5,7]];
  colors = [[255,255,255],[255,0,255],[255,0,0],[0,255,0],[0,0,255],[255,255,0],[150,220,150],[190,75,0]];
  a_down=false;
  s_down=false;
  w_down=false;
  d_down=false;
  shift_down=false;
  space_down=false;
  up_down=false;
  down_down=false;
  left_down=false;
  right_down=false;
	while(true){
		events=window.pumpEvents();
		for(event:events){
			if(event.type==Game.EventType.QUIT){
				return;
			}
			
			else if(event.type==Game.EventType.KEY_DOWN){
				switch(event.key){
				case Game.KeyboardKey.A:
				a_down=true;
				break;
				case Game.KeyboardKey.D:
				d_down=true;
				break;
				case Game.KeyboardKey.W:
				w_down=true;
				break;
				case Game.KeyboardKey.S:
				s_down=true;
				break;
				case Game.KeyboardKey.SHIFT:
				shift_down=true;
				break;
				case Game.KeyboardKey.SPACE:
				space_down=true;
				break;
				case Game.KeyboardKey.UP:
				up_down=true;
				break;
				case Game.KeyboardKey.DOWN:
				down_down=true;
				break;
				case Game.KeyboardKey.LEFT:
				left_down=true;
				break;
				case Game.KeyboardKey.RIGHT:
				right_down=true;
				break;
				case Game.KeyboardKey.P:
				cam.reset();
				break;
				}
			}
			else if(event.type==Game.EventType.KEY_UP){
				switch(event.key){
				case Game.KeyboardKey.A:
				a_down=false;
				break;
				case Game.KeyboardKey.D:
				d_down=false;
				break;
				case Game.KeyboardKey.W:
				w_down=false;
				break;
				case Game.KeyboardKey.S:
				s_down=false;
				break;
				case Game.KeyboardKey.SHIFT:
				shift_down=false;
				break;
				case Game.KeyboardKey.SPACE:
				space_down=false;
				break;
				case Game.KeyboardKey.UP:
				up_down=false;
				break;
				case Game.KeyboardKey.DOWN:
				down_down=false;
				break;
				case Game.KeyboardKey.LEFT:
				left_down=false;
				break;
				case Game.KeyboardKey.RIGHT:
				right_down=false;
				break;
				}
			}
		}
		if(a_down){
			cam.change_y(-0.1*Math.cos(rz+(Math.PI/2)));
			cam.change_x(-0.1*Math.sin(rz+(Math.PI/2)));
		}
		if(d_down){
			cam.change_y(0.1*Math.cos(rz+(Math.PI/2)));
			cam.change_x(0.1*Math.sin(rz+(Math.PI/2)));
		}
		if(w_down){
			cam.change_y(0.1*Math.cos(rz));
			cam.change_x(0.1*Math.sin(rz));
		}
		if(s_down){
			cam.change_y(-0.1*Math.cos(rz));
			cam.change_x(-0.1*Math.sin(rz));
		}
		if(space_down){
			cam.change_z(-0.1);
		}
		if(shift_down){
			cam.change_z(0.1);
		}
		if(left_down){
			cam.rz_local(-0.1);
			rz-=0.1;
		}
		if(right_down){
			cam.rz_local(0.1);
			rz+=0.1;
		}
		if(up_down){
			cam.rx_global(0.1);
		}
		if(down_down){
			cam.rx_global(-0.1);
		}
		
		Graphics2D.Draw.fill(0,0,0);
		//renderman.draw_scene(cam,cube,faces);
		renderwoman.draw_scene(cam,cube,faces,[colors]);
		Graphics2D.Draw.line(150,150,150,450,2,255,255,255);
		Graphics2D.Draw.line(450,450,150,450,2,255,255,255);
		Graphics2D.Draw.line(450,450,450,150,2,255,255,255);
		Graphics2D.Draw.line(150,150,450,150,2,255,255,255);
		
		window.clockTick();
	}
 
}
