import Graphics2D;
import Math;
const max_sort_iter_count=20;
const near_clip=0.01;

class vertexrenderer{
	
	field screenwidth=300;
	field screenheight=300;
	field x_offset=150;
	field y_offset=150;
	
	function tri_inter(ax,ay,bx,by,cx,cy,px,py){ //Triangular Iterpolation
		a =((ax-bx)*(ay-py))-((ay-by)*(ax-px)); //Area of Opposite-C
		b =((cx-ax)*(cy-py))-((cy-ay)*(cx-px));  //Area of Opposite-B
		c =((bx-cx)*(by-py))-((by-cy)*(bx-px)); //Area of Opposite-A
		if((a>=0&&b>=0&&c>=0)||(a<=0&&b<=0&&c<=0)){
			d=((ax-bx)*(by-cy))-((ay-by)*(bx-cx));
			if(d==0){
				return [0,0,0];
			}
			return [a/d,b/d,c/d];
		}else{
			return null;
		}
	}

	function generate_key(a,b,c){
		coord_group_=[Math.floor(a*1000),Math.floor(b*1000),Math.floor(c*1000)];
		coord_group_.sort();
		coord_group_.reverse();
		return coord_group_.join("/");
	}
	
	function draw_scene(cam,coords,polys,extra_data=[]){ 
	//Simple Painter's Alg with no Overlap Handling
	zindex=[]; //Each entry refers to an index in the polygon list, sorted from backmost to frontmost
	//The z-index is calculated by averaging. Nothing more, nothing less
	screen_coords=cam.pj_screen_space(coords,this.screenwidth,this.screenheight,true);
	zindex=[];
	for(i=0;i<polys.length;i++){
		zindex.add(i);
	}
	//Sort the z-indexes by z-distance
	zindex.sort((polygon_index_)=>(Math.max(Math.max(screen_coords[polys[polygon_index_][0]][2],screen_coords[polys[polygon_index_][1]][2]),screen_coords[polys[polygon_index_][2]][2])));

	zindex=zindex.filter((polygon_index_)=>(near_clip<Math.max(Math.max(screen_coords[polys[polygon_index_][0]][2],screen_coords[polys[polygon_index_][1]][2]),screen_coords[polys[polygon_index_][2]][2])));
	zindex.reverse();
	for(polygon_index : zindex){

			polygon_screen_coords = []; 
			vertex_a=screen_coords[polys[polygon_index][0]];
			vertex_b=screen_coords[polys[polygon_index][1]];
			vertex_c=screen_coords[polys[polygon_index][2]];
			
			
			if(vertex_a[2]<near_clip||vertex_b[2]<near_clip||vertex_c[2]<near_clip){
				//Manually assemble a polygon with cliped vertices
				//Determines which vertices have been clipped out of view
				a_clipped=vertex_a[2]<near_clip;
				b_clipped=vertex_b[2]<near_clip;
				c_clipped=vertex_c[2]<near_clip;
				//Add non-clipped vertices and construct clipped vertices
				if(!a_clipped){
					polygon_screen_coords.add(vertex_a);
				}
				if(a_clipped!=b_clipped){//Construct a clipped A-B vertex
					polygon_screen_coords.add([
						(((near_clip-vertex_b[2])*(((vertex_a[0]*vertex_a[2])-(vertex_b[0]*vertex_b[2]))/(vertex_a[2]-vertex_b[2])))+(vertex_b[0]*vertex_b[2]))/near_clip,
						(((near_clip-vertex_b[2])*(((vertex_a[1]*vertex_a[2])-(vertex_b[1]*vertex_b[2]))/(vertex_a[2]-vertex_b[2])))+(vertex_b[1]*vertex_b[2]))/near_clip
					]);
				}
				if(!b_clipped){
					polygon_screen_coords.add(vertex_b);
				}
				if(c_clipped!=b_clipped){//Construct a clipped B-C vertex
					polygon_screen_coords.add([
						(((near_clip-vertex_b[2])*(((vertex_c[0]*vertex_c[2])-(vertex_b[0]*vertex_b[2]))/(vertex_c[2]-vertex_b[2])))+(vertex_b[0]*vertex_b[2]))/near_clip,
						(((near_clip-vertex_b[2])*(((vertex_c[1]*vertex_c[2])-(vertex_b[1]*vertex_b[2]))/(vertex_c[2]-vertex_b[2])))+(vertex_b[1]*vertex_b[2]))/near_clip
					]);
				}

				if(!c_clipped){
					polygon_screen_coords.add(vertex_c);
				}
				if(c_clipped!=a_clipped){//Construct a clipped A-C vertex
					polygon_screen_coords.add([
						(((near_clip-vertex_a[2])*(((vertex_c[0]*vertex_c[2])-(vertex_a[0]*vertex_a[2]))/(vertex_c[2]-vertex_a[2])))+(vertex_a[0]*vertex_a[2]))/near_clip,
						(((near_clip-vertex_a[2])*(((vertex_c[1]*vertex_c[2])-(vertex_a[1]*vertex_a[2]))/(vertex_c[2]-vertex_a[2])))+(vertex_a[1]*vertex_a[2]))/near_clip
					]);
				}
				if(polygon_screen_coords.length<4){
					polygon_screen_coords.add(polygon_screen_coords[-1]);
				}
				this.poly_shader(polygon_screen_coords,polygon_index,extra_data);
			}else{
			this.poly_shader([vertex_a,vertex_b,vertex_c,vertex_c],polygon_index,extra_data);
			}
		}
		
		
		
	}

	function poly_shader(polygon_screen_coords,polygon_index,extra_data){
		Graphics2D.Draw.quad(this.x_offset+polygon_screen_coords[0][0],this.y_offset+polygon_screen_coords[0][1],
		this.x_offset+polygon_screen_coords[1][0],this.y_offset+polygon_screen_coords[1][1],
		this.x_offset+polygon_screen_coords[2][0],this.y_offset+polygon_screen_coords[2][1],
		this.x_offset+polygon_screen_coords[3][0],this.y_offset+polygon_screen_coords[3][1],
		255,255,255);

	}


	
	function polish(poly,interpol){
		return [255,255,255];
	}

}